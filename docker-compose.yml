version: '3.8'

services:
  # MySQL Database
  mysql-db:
    image: mysql:8.0
    container_name: lms-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-your_mysql_password}
      MYSQL_DATABASE: ${DB_NAME:-lms_db}
      MYSQL_USER: ${DB_USER:-lms_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-your_mysql_password}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./nestjs-backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 20s
      retries: 10

  # Redis Cache
  redis-cache:
    image: redis:7-alpine
    container_name: lms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Meilisearch Search Engine
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: lms-meilisearch
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY:-your_meilisearch_master_key}
      MEILI_ENV: ${MEILISEARCH_ENV:-production}
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 3s
      retries: 5
  # ML Recommendation Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: lms-ml-service
    environment:
      FLASK_ENV: production
      DB_HOST: mysql-db
      DB_USER: ${DB_USER:-lms_user}
      DB_PASSWORD: ${DB_PASSWORD:-your_mysql_password}
      DB_NAME: ${DB_NAME:-lms_db}
      REDIS_HOST: redis-cache
      REDIS_PORT: 6379
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    volumes:
      - ml_logs:/app/logs
      - ml_models:/app/ml/models
    depends_on:
      mysql-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    networks:
      - lms-network
    restart: unless-stopped
    # Health check disabled as it's commented out in Dockerfile
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3  # NestJS Backend
  nestjs-backend:
    build:
      context: .
      dockerfile: ./nestjs-backend/Dockerfile
    container_name: lms-nestjs-backend
    environment:
      NODE_ENV: production
      DB_HOST: mysql-db
      DB_PORT: 3306
      DB_USERNAME: ${DB_USER:-lms_user}
      DB_PASSWORD: ${DB_PASSWORD:-your_mysql_password}
      DB_NAME: ${DB_NAME:-lms_db}
      REDIS_HOST: redis-cache
      REDIS_PORT: 6379
      ML_SERVICE_URL: http://ml-service:8000
      MEILISEARCH_HOST: http://meilisearch:7700
      MEILISEARCH_API_KEY: ${MEILISEARCH_MASTER_KEY:-your_meilisearch_master_key}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    ports:
      - "5000:5000"
    depends_on:
      mysql-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      ml-service:
        condition: service_started
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lms-frontend
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: /api
    ports:
      - "3000:3000"
    depends_on:
      - nestjs-backend
    networks:
      - lms-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lms-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      # SSL directory - create ./ssl directory or comment out this line
      # - ./ssl:/etc/nginx/ssl
    depends_on:
      - nestjs-backend
      - ml-service
      - frontend
    networks:
      - lms-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  meilisearch_data:
    driver: local
  ml_logs:
    driver: local
  ml_models:
    driver: local

networks:
  lms-network:
    driver: bridge
